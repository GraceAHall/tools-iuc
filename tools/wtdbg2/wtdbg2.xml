<tool id="wtdbg2" name="wtdbg2" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01" license="GPL-3.0-only">
    <description>fast de novo sequence assembler for long noisy reads</description>
    <xrefs>
        <xref type='bio.tools'>wtdbg2</xref>
    </xrefs>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">wtdbg</requirement>
    </requirements>
    <version_command>wtdbg2 -V</version_command>
    <command detect_errors="exit_code"><![CDATA[
        ## helper function to sort fastqs before fastas in input readsets
        #def sort_fastq_fasta(files):
            #set fastqs = [f for f in $files if f.is_of_type('fastq')]
            #set fastas = [f for f in $files if f.is_of_type('fasta')]
            #set out = $fastqs + $fastas
            #return $out
        #end def

        ## prepare readset inputs 
        #set input_reads_sorted = $sort_fastq_fasta($input_reads)
        
        ## perform assembly
        wtdbg2 
        -t \${GALAXY_SLOTS:-4}
        -x '${sequencing_technology}'
        -g '${genome_size}'
        @ADV_SETTINGS@
        #for $readset in $input_reads_sorted:
            -i '${readset}'
        #end for
        -fo out &&
        wtpoa-cns
        -t \${GALAXY_SLOTS:-4}
        -i out.ctg.lay.gz
        -fo out.fa
    ]]></command>
    <inputs>
        <param name="input_reads" type="data" format="fastq,fasta" multiple='true' label="Select input reads from history" help="Select one or more input fastq or fasta files from your history. To select multiple files, use ctrl + click" />
        <param name="sequencing_technology" type="select" label="Sequencing Technology" help="Sequencing technology used to generate reads">
            <option value="ont">Oxford Nanopore (ont)</option>
            <option value="ccs">PacBio CCS (ccs)</option>
            <option value="rs">PacBio RSII (rs)</option>
            <option value="sq">PacBio Sequel (sq)</option>
        </param>
        <param name="genome_size" type="text" value="" label="Genome size" help="Estimated genome size. k/m/g suffix is allowed - eg a 4500000bp ecoli genome can be written as 4.5m. For a human genome, use 3.2g">
            <sanitizer invalid_char="">
                <valid initial="string.letters,string.digits">
                    <add value="." />
                </valid>
            </sanitizer>
        </param>
        <section name="adv" title="Advanced" expanded="false">
            <param argument="-X" type="float" value="" label="Read depth" help="(-X) [float] Choose the best [float] depth from input reads. ie if the estimated genome size is 5m, setting this value to 50.0 would select the best 2.5mb worth of reads." optional="true" />
            <param argument="-L" type="integer" value="" label="Min read length" help="(-L) [int] Choose the longest subread and drop reads shorter than [int]" optional="true" />
            <param argument="-k" type="integer" value="" label="Kmer size" help="(-k) [int] Kmer size, 0 &#8804; k &#8804; 23" optional="true" />
            <param argument="-p" type="integer" value="" label="Homopolymer-compressed kmer size" help="(-p) [int] Homopolymer-compressed kmer size, 0 &#8804; p &#8804; 23" optional="true" />
            <param argument="-K" type="float" value="" label="Max kmer frequency" help="(-K) [float] Filter high frequency kmers where frequency > [float]" optional="true" />
            <param argument="-l" type="float" value="" label="Min length of alignment" help="(-l) [float]" optional="true" />
            <param argument="-m" type="float" value="" label="Min matched length by kmer matching" help="(-m) [float]" optional="true" />
            <param name="realign" type="boolean" truevalue="-R" falsevalue="" label="Realignment" help="(-R) Enable realignment mode" optional="true" />
            <param name="contained_reads" type="boolean" truevalue="-A" falsevalue="" label="Contained reads" help="(-A) Keep contained reads during alignment" optional="true" />
            <param argument="-s" type="float" value="" label="Min read similarity" help="(-s) [float] Min similarity between reads to label as related, calculated by kmer matched length / aligned length" optional="true" />
            <param argument="-e" type="integer" value="" label="Min edge depth" help="(-e) [int] Min read depth of a valid edge" optional="true" />
        </section>
    </inputs>
    <outputs>
        <data name='out_assembly' format='fasta' label="${tool.name} on ${on_string}: assembled contigs" from_work_dir="out.fa" />
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="input_reads" value="test1.fastq" />
            <param name="sequencing_technology" value="ont" />
            <param name="genome_size" value="60k" />
            <output name="out_assembly">
                <assert_contents>
                    <has_text text=">ctg1 " />
                    <has_text text=">ctg2 " />
                    <has_text text=">ctg3 " />
                    <has_size value="70000" delta="10000" />
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="input_reads" value="test1_head.fa,test1_tail.fastq" />
            <param name="sequencing_technology" value="ont" />
            <param name="genome_size" value="60k" />
            <output name="out_assembly">
                <assert_contents>
                    <has_text text=">ctg1 " />
                    <has_text text=">ctg2 " />
                    <has_text text=">ctg3 " />
                    <has_size value="70000" delta="10000" />
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="input_reads" value="test1.fastq" />
            <param name="sequencing_technology" value="ont" />
            <param name="genome_size" value="60k" />
            <section name="adv">
                <param name='X' value="10.0" />
                <param name='L' value="2000" />
                <param name='k' value="15" />
                <param name='p' value="0" />
                <param name='K' value="500" />
                <param name='l' value="1024" />
                <param name='m' value="200" />
                <param name='s' value="0.1" />
                <param name='e' value="5" />
            </section>
            <output name="out_assembly">
                <assert_contents>
                    <has_text text=">ctg1 " />
                    <has_text text=">ctg2 " />
                    <has_text text=">ctg3 " />
                    <has_size value="50000" delta="10000" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[

**Wtdbg2**

|

**What it does**

See the github (https://github.com/ruanjue/wtdbg2) and paper (https://doi.org/10.1038/s41592-019-0669-3) for more information. 

"Wtdbg2 is a de novo sequence assembler for long noisy reads produced by PacBio or Oxford Nanopore Technologies (ONT). It assembles raw reads without error correction and then builds the consensus from intermediate assembly output. Wtdbg2 is able to assemble the human and even the 32Gb Axolotl genome at a speed tens of times faster than CANU and FALCON while producing contigs of comparable base accuracy.

During assembly, wtdbg2 chops reads into 1024bp segments, merges similar segments into a vertex and connects vertices based on the segment adjacency on reads. The resulting graph is called fuzzy Bruijn graph (FBG). It is akin to De Bruijn graph but permits mismatches/gaps and keeps read paths when collapsing k-mers. The use of FBG distinguishes wtdbg2 from the majority of long-read assemblers."

|

**Input**

One or more fastq or fasta files. Can be in any fastq/fasta format with any valid exension. 

|

**Output**

Assembled contigs (the assembled genome).
To polish, use external tools such as pilon, racon, medaka, nextpolish etc.

|

**Sequencing Technology Preset Information**

- Oxford Nanopore (ont) (genome size < 1G):     -p 0 -k 15 -AS 2 -s 0.05 -L 5000
- Oxford Nanopore (ont) (genome size >= 1G):    -p 19 -AS 2 -s 0.05 -L 5000
- PacBio CCS (ccs):                             -p 21 -k 0 -AS 4 -K 0.05 -s 0.5
- PacBio RSII (rs):                             -p 21 -S 4 -s 0.05 -L 5000
- PacBio Sequel (sq) (genome size < 1G):        -p 0 -k 15 -AS 2 -s 0.05 -L 5000
- PacBio Sequel (sq) (genome size >= 1G):       -p 19 -AS 2 -s 0.05 -L 5000

|

    ]]></help>
    <expand macro="citations" />
</tool>